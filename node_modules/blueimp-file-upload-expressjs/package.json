{
  "name": "blueimp-file-upload-expressjs",
  "version": "0.2.12",
  "description": "jQuery File Upload using Expressjs : 'borrowed' from Blueimp jQuery File Upload developed by Sebastian Tschan",
  "main": "index.js",
  "scripts": {
    "test": "jasmine-node specs/"
  },
  "dependencies": {
    "formidable": "^1.0.14",
    "mkdirp": "^0.5.0",
    "aws-sdk": "^2.0.0-rc.19"
  },
  "devDependencies": {
    "jasmine-node": "1.14.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/arvindr21/blueimp-file-upload-expressjs.git"
  },
  "keywords": [
    "jQuery",
    "file",
    "upload",
    "expressjs"
  ],
  "author": {
    "name": "Arvind Ravulavaru"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/arvindr21/blueimp-file-upload-expressjs/issues"
  },
  "homepage": "https://github.com/arvindr21/blueimp-file-upload-expressjs",
  "readme": "# Blueimp file upload for Express js\n\n[![NPM](https://nodei.co/npm/blueimp-file-upload-expressjs.png?downloads=true)](https://nodei.co/npm/blueimp-file-upload-expressjs/)\n\n[![Build Status](https://travis-ci.org/arvindr21/blueimp-file-upload-expressjs.svg?branch=master)](https://travis-ci.org/arvindr21/blueimp-file-upload-expressjs)\n\n* A simple express module for integrating jQuery File Upload.\n* The code is borrowed from [here](https://github.com/blueimp/jQuery-File-Upload/tree/master/server/node) and made compatible with Expressjs \n* [Demo](http://expressjs-fileupload.cloudno.de/)\n* [Tutorial](http://thejackalofjavascript.com/uploading-files-made-fun)\n\n\n## Features\n* Upload to server\n* Upload to AWS\n* Client available [here](http://blueimp.github.io/jQuery-File-Upload/)\n\n## Installation\n\n    $ npm install blueimp-file-upload-expressjs\n\n\n\n## Options\n```js\noptions = {\n    tmpDir: __dirname + '/tmp', // tmp dir to upload files to\n    uploadDir: __dirname + '/public/files', // actual location of the file\n    uploadUrl: '/files/', // end point for delete route \n    maxPostSize: 11000000000, // 11 GB\n    minFileSize: 1,\n    maxFileSize: 10000000000, // 10 GB\n    acceptFileTypes: /.+/i,\n    inlineFileTypes: /\\.(gif|jpe?g|png)/i,\n    imageTypes:  /\\.(gif|jpe?g|png)/i,\n    imageVersions: {\n        'thumbnail': {\n            width: 80,\n            height: 80\n        }\n    },\n    accessControl: {\n        allowOrigin: '*',\n        allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE',\n        allowHeaders: 'Content-Type, Content-Range, Content-Disposition'\n    },\n    storage : {\n        type : 'local', // local or aws\n        aws : {\n            accessKeyId :  'xxxxxxxxxxxxxxxxx', // required if aws\n            secretAccessKey : 'xxxxxxxxxxxxxxxxxxxxxxx', // required if aws\n            region : 'us-west-2', //make sure you know the region, else leave this option out\n            bucketName : 'xxxxxxxxx' // required if aws\n        }\n    }\n};\n\n```\n## Usage with options \n(*refer tutorial*)\n```js\n// config the uploader\nvar options = {\n    tmpDir:  __dirname + '/../public/uploaded/tmp',\n    uploadDir: __dirname + '/../public/uploaded/files',\n    uploadUrl:  '/uploaded/files/',\n    maxPostSize: 11000000000, // 11 GB\n    minFileSize:  1,\n    maxFileSize:  10000000000, // 10 GB\n    acceptFileTypes:  /.+/i,\n    // Files not matched by this regular expression force a download dialog,\n    // to prevent executing any scripts in the context of the service domain:\n    inlineFileTypes:  /\\.(gif|jpe?g|png)/i,\n    imageTypes:  /\\.(gif|jpe?g|png)/i,\n    imageVersions: {\n        width:  80,\n        height: 80\n    },\n    accessControl: {\n        allowOrigin: '*',\n        allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE',\n        allowHeaders: 'Content-Type, Content-Range, Content-Disposition'\n    },\n    storage : {\n        type : 'aws',\n        aws : {\n            accessKeyId :  'xxxxxxxxxxxxxxxxx',\n            secretAccessKey : 'xxxxxxxxxxxxxxxxx',\n            region : 'us-east-1',//make sure you know the region, else leave this option out\n            bucketName : 'xxxxxxxxxxxxxxxxx'\n        }\n    }\n};\n\n// init the uploader\nvar uploader = require('blueimp-file-upload-expressjs')(options);\n\n\nmodule.exports = function (router) {\n    router.get('/upload', function(req, res) {\n      uploader.get(req, res, function (obj) {\n            res.send(JSON.stringify(obj)); \n      });\n      \n    });\n\n    router.post('/upload', function(req, res) {\n      uploader.post(req, res, function (obj) {\n            res.send(JSON.stringify(obj)); \n      });\n      \n    });\n    \n    // the path SHOULD match options.uploadUrl\n    router.delete('/uploaded/files/:name', function(req, res) {\n      uploader.delete(req, res, function (obj) {\n            res.send(JSON.stringify(obj)); \n      });\n      \n    });\n    return router;\n}\n```\n## SSL Support\n\nSet the `useSSL` option to `true` to use the package with an [HTTPS server](http://expressjs.com/4x/api.html#app.listen).\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar https = require('https');\n\nvar app = express()\n\n// config the uploader\nvar options = {\n    ...\n    useSSL: true\n    ...\n};\n\n// init the uploader\nvar uploader = require('blueimp-file-upload-expressjs')(options);\n\napp.get('/upload', function(req, res) {\n    uploader.get(req, res, function (obj) {\n    res.send(JSON.stringify(obj)); \n})\n    .post('/upload', // ...\n    .delete('/uploaded/files/:name', // ...\n\n// create the HTTPS server\nvar app_key = fs.readFileSync('key.pem');\nvar app_cert = fs.readFileSync('cert.pem');\n\nhttps.createServer({key: app_key, cert: app_cert}, app).listen(443);\n\n```\n\n## Todo\n\n* Write Complete Tests\n* Fix Thumbnail creation when uploading images with a more 'feasible' appraoch\n* Add reizing, croping and other filter effects \n* ~~Amazon S3 Intergartion~~\n* Azure Integration\n* ~~SSL SUpport~~\n\n***\n## License\n\n### MIT\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "blueimp-file-upload-expressjs@0.2.12",
  "dist": {
    "shasum": "b2c6f6ffa6d18f30a4e021df9076f38185529374"
  },
  "_from": "blueimp-file-upload-expressjs@~0.2.12",
  "_resolved": "https://registry.npmjs.org/blueimp-file-upload-expressjs/-/blueimp-file-upload-expressjs-0.2.12.tgz"
}
